using BinanceChain.NET.Api.Domain;
using BinanceChain.NET.Api.Domain.Broadcast;
using BinanceChain.NET.Api.Domain.TransactionMessages.Proto;

namespace BinanceChain.NET.Api.Domain.TransactionMessages
{
    /*
     * https://binance-chain.github.io/encoding.html#binance-chain-transaction-encoding-specification
     // please note the field name is the JSON name.
        message NewOrder {
          0xCE6DC043   // hardcoded, object type prefix in 4 bytes
          bytes sender = 1 // order originating address
          string id = 2 // order id, this is much, please check the details below Order ID section.
          string symbol = 3 // symbol for trading pair in full name of the tokens
          int64 ordertype = 4 // only accept 2 for now, meaning limit order
          int64  side = 5 // 1 for buy and 2 fory sell
          int64 price = 6 // price of the order, which is the real price multiplied by 1e8 (10^8) and rounded to integer
          int64 quantity = 7 // quantity of the order, which is the real price multiplied by 1e8 (10^8) and rounded to integer
          int64 timeinforce = 8 // 1 for Good Till Expire(GTE) order and 3 for Immediate Or Cancel (IOC)
        }
    */
    internal class NewOrderMessage : TransactionMessage
    {
        private readonly Wallet wallet;
        private readonly TransactionOption options;
        private readonly NewOrderProto proto;

        public NewOrderMessage(NewOrder order, Wallet wallet, TransactionOption options)
        {
            this.wallet = wallet;
            this.options = options;

            this.proto = new NewOrderProto();
            this.proto.Sender = wallet.Address;
            this.proto.Id = GenerateOrderId(wallet);
            this.proto.Symbol = order.Symbol;
            this.proto.OrderType = order.OrderType;
            this.proto.Side = order.Side;
            this.proto.Price = base.StringDecimalToLong(order.Price);
            this.proto.Quantity = base.StringDecimalToLong(order.Quantity);
            this.proto.TimeInForce = order.TimeInForce;
        }

        /// <summary>
        /// Order ID is unique across the world. It is generated by sender and acknowledged by Binance DEX. 
        /// The current implementation is composed 3 parts:
        /// 1. Sender address in HEX format, without human-readable prefix
        /// 2. A dash sign: -
        /// 3. Sequence number
        /// Eg: 40C2979694BBC961023D1D27BE6FC4D21A9FEBE6-5
        /// </summary>
        /// <returns></returns>
        private string GenerateOrderId(Wallet wallet)
        {
            return $"{wallet.Address.ToUpper()}-{(wallet.Sequence + 1)}";
        }

        public override RequestBody ToRequest()
        {
            byte[] message = base.Encode<NewOrderProto>(proto);
            byte[] signature = base.GetSignatureBytes(proto, wallet, options);
            byte[] stdTx = base.GetStandardTxBytes(message, signature, options);

            return new RequestBody() { Data = stdTx };
        }
    }
}
